iex(1)> spawn(fn -> 1 + 2 end)
#PID<0.110.0>
iex(2)> pid = spawn(fn -> 1 + 2 end)
#PID<0.111.0>
iex(3)> Process.alive?(pid)
false
iex(4)> self()
#PID<0.109.0>
iex(5)> Process.alive?(self())                                                                                             
true
iex(6)> send(self(), {:hello, :world})                                                                                     
{:hello, :world}
iex(7)> reveive do                                                                                                         
...(7)> {:hello, msg} -> msg                                                                                               
...(7)> {:world, _msg} -> "won't match"                                                                                    
...(7)> end                                                                                                                
error: undefined function reveive/1 (there is no such import)
└─ iex:7

** (CompileError) cannot compile code (errors have been logged)

iex(7)> receive do                                                                                                         
...(7)> {:hello, msg} -> msg                                                                                               
...(7)> {:world, _msg} -> "won't match"                                                                                    
...(7)> end                                                                                                                
:world
iex(8)> receive do                                                                                                         
...(8)> {:hello, msg} -> msg
...(8)> after
...(8)> 1_000 -> "nothing after 1s"
...(8)> end
"nothing after 1s"
iex(9)> parent = self()
#PID<0.109.0>
iex(10)> spawn(fn -> send(parent,{:hello, self()}) end)
#PID<0.113.0>
iex(11)> receive do
...(11)> {:hello, pid} -> "Got hello from #{inspect pid}"
...(11)> end
"Got hello from #PID<0.113.0>"
iex(12)>

State  - 
{:ok, pid} = KV.Processes.start_link()                                                                
{:ok, #PID<0.117.0>}
iex(2)> send(pid, {:get, :hello, self()})                                                                     
{:get, :hello, #PID<0.116.0>}
iex(3)> flush()                                                                                               
nil
:ok
iex(4)> send(pid, {:put, :hello, :world})                                                                     
{:put, :hello, :world}
iex(5)> send(pid, {:get, :hello, self()}                                                                      
...(5)> )                                                                                                     
{:get, :hello, #PID<0.116.0>}
iex(6)> flush()                                                                                               
:world
:ok
iex(7)> Process.register(pid, :processes)                                                                     
true
iex(8)> send(:processes, {:get, :hello, self()})                                                              
{:get, :hello, #PID<0.116.0>}
iex(9)> flush()                                                                                               
:world
:ok
iex(10)>                                                                                                      
nil
iex(11)> {:ok, pid} = Agent.start_link(fn -> %{} end)                                                         
{:ok, #PID<0.118.0>}
iex(12)> Agent.update(pid, fn map -> Map.put(map, :hello, :world) end)                                        
:ok
iex(13)> Agent.get(pid, fn map -> Map.get(map, :hello) end)                                                   
:world